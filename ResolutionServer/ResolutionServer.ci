//ResolutionServer.ci

mainmodule ResolutionServer {
	
	extern module Reductions;
	
	readonly int verbosity;

	mainchare Main {
		entry Main();
		
		entry void authenticate(CkCcsRequestMsg* m);
		entry void listSimulations(CkCcsRequestMsg* m);
		entry void chooseSimulation(CkCcsRequestMsg* m);
		entry [threaded] void chooseColorValue(CkCcsRequestMsg* m);
		entry void startVisualization(CkReductionMsg* m);
		entry void shutdownServer(CkCcsRequestMsg* m);
		entry [threaded] void activate(CkCcsRequestMsg* m);
		entry void collectStats(CkCcsRequestMsg* m);
		entry void statsCollected(CkReductionMsg* m);
		
	};
	
	array [1D] Worker {
		entry Worker(const CkGroupID& metaID);
		
		entry void loadSimulation(const std::string& simulationName, const CkCallback& cb);
		
		entry void generateImage(liveVizRequestMsg* m);
		
		entry void valueRange(CkCcsRequestMsg* m);
		entry void collectStats(const std::string& id, const CkCallback& cb);
		entry void chooseColorValue(const std::string& attributeName, const int beLogarithmic, const double minVal, const double maxVal, const CkCallback& cb);
	};
	
	group MetaInformationHandler {
		entry MetaInformationHandler();
		
		entry void specifyBox(CkCcsRequestMsg* m);
		entry void clearBoxes(CkCcsRequestMsg* m);
		entry void specifySphere(CkCcsRequestMsg* m);
		entry void clearSpheres(CkCcsRequestMsg* m);
		entry void activate(const std::string& id, const CkCallback& cb);
	};
};
