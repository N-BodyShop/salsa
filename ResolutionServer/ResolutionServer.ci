//ResolutionServer.ci

mainmodule ResolutionServer {
	
	extern module Reductions;
	
	readonly int verbosity;

	mainchare [python] Main {
		entry Main(); //creates interpreter, load Python binding to Main classes, expose this object to instance of interpreter
		
		entry void listSimulations(CkCcsRequestMsg* m);
		entry void chooseSimulation(CkCcsRequestMsg* m);
		entry void makeColoring(CkCcsRequestMsg* m);
		entry void coloringMade(CkReductionMsg* m);
		entry void startVisualization(CkReductionMsg* m);
		entry void shutdownServer(CkCcsRequestMsg* m);
		entry [threaded] void activate(CkCcsRequestMsg* m);
		entry void collectStats(CkCcsRequestMsg* m);
		entry void statsCollected(CkReductionMsg* m);
		entry void calculateDepth(CkCcsRequestMsg* m);
		entry void depthCalculated(CkReductionMsg* m);
		entry void makeGroup(CkCcsRequestMsg* m);
		entry [threaded] void activateGroup(CkCcsRequestMsg* m);
		entry [threaded] void drawVectors(CkCcsRequestMsg* m);
		entry [threaded] void localParticleCode(CkCcsRequestMsg* m);
		
		entry void executePythonCode(CkCcsRequestMsg* m);
		entry [python] void getFamilies(int handle);
		entry [python] void getAttributes(int handle);
		entry [python] void getGroups(int handle);
		entry [python] void getNumParticles(int);
		entry [python] void getAttributeRange(int handle);
		entry [python] void getAttributeSum(int handle);
		entry [python] void getDimensions(int handle);
		entry [python] void getDataType(int handle);
		entry [python] void getCenterOfMass(int handle);
		entry [python] void createGroup_Family(int handle);
		entry [python] void createGroup_AttributeRange(int handle);
		entry [python] void createGroupAttributeSphere(int handle);
		entry [python] void runLocalParticleCode(int handle);
	};
	
	array [1D] [python] Worker {
		entry Worker(const CkGroupID& metaID);
		
		entry void loadSimulation(const std::string& simulationName, const CkCallback& cb);
		
		entry void generateImage(liveVizRequestMsg* m);
		
		entry void valueRange(CkCcsRequestMsg* m);
		entry void collectStats(const std::string& id, const CkCallback& cb);
		entry void makeColoring(const std::string& specification, const CkCallback& cb);
		
		entry void calculateDepth(MyVizRequest req, const CkCallback& cb);
		entry void makeGroup(const std::string& s, const CkCallback& cb);
		entry void setActiveGroup(const std::string& s, const CkCallback& cb);
		entry void setDrawVectors(const std::string& s, const CkCallback& cb);
		
		entry void getAttributeInformation(CkCcsRequestMsg* m);
		entry void getColoringInformation(CkCcsRequestMsg* m);
	
		entry void getAttributeSum(const std::string& groupName, const std::string& attributeName, const CkCallback& cb);
		entry void getCenterOfMass(const std::string& groupName, const CkCallback& cb);
		entry void createGroup_Family(const std::string& familyName, const CkCallback& cb);
		entry void createGroup_AttributeRange(const std::string& groupName, const std::string& attributeName, double minValue, double maxValue, const CkCallback& cb);
		entry void createGroup_AttributeSphere(const std::string& groupName, const std::string& attributeName, Vector3D<double> center, double size, const CkCallback& cb);
		entry void localParticleCode(std::string s, const CkCallback &cb);
	};
	
	group MetaInformationHandler {
		entry MetaInformationHandler();
		
		entry void specifyBox(CkCcsRequestMsg* m);
		entry void clearBoxes(CkCcsRequestMsg* m);
		entry void specifySphere(CkCcsRequestMsg* m);
		entry void clearSpheres(CkCcsRequestMsg* m);
		entry void activate(const std::string& id, const CkCallback& cb);
	};
};
