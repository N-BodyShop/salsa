//ResolutionServer.ci

mainmodule ResolutionServer {
	
	extern module Reductions;
	
	readonly int verbosity;

	mainchare [python] Main {
		entry Main(); //creates interpreter, load Python binding to Main classes, expose this object to instance of interpreter
		
		entry void listSimulations(CkCcsRequestMsg* m);
		entry void chooseSimulation(CkCcsRequestMsg* m);
		entry void makeColoring(CkCcsRequestMsg* m);
		entry void coloringMade(CkReductionMsg* m);
		entry void startVisualization(CkReductionMsg* m);
		entry void shutdownServer(CkCcsRequestMsg* m);
		entry [threaded] void activate(CkCcsRequestMsg* m);
		entry void collectStats(CkCcsRequestMsg* m);
		entry void statsCollected(CkReductionMsg* m);
		entry void calculateDepth(CkCcsRequestMsg* m);
		entry void depthCalculated(CkReductionMsg* m);
		entry void makeGroup(CkCcsRequestMsg* m);
		entry [threaded] void activateGroup(CkCcsRequestMsg* m);
		entry [threaded] void drawVectors(CkCcsRequestMsg* m);
		entry [threaded] void localParticleCode(CkCcsRequestMsg* m);
		
		entry [python "Choose a simulation file"]
		      void loadSimulation(int handle);
		entry [python "Read attribute from tipsy array file"]
			void readTipsyArray(int handle);
		entry [python "return position with a group of the minimum value of an attribute"]
			void findAttributeMin(int handle);
		entry [python "return simulate time"]
			void getTime(int handle);
		entry [python "return list of families"]
			void getFamilies(int handle);
		entry [python "return list of attributes of a family"]
			void getAttributes(int handle);
		entry [python "return list of groups"]
			void getGroups(int handle);
		entry [python "return number of particles in a family"]
			void getNumParticles(int);
		entry [python] void getAttributeRange(int handle);
		entry [python "return range of attribute with a group"]
			void getAttributeRangeGroup(int handle);
		entry [python "return sum within a group of an attribute"]
			void getAttributeSum(int handle);
		entry [python] void getDimensions(int handle);
		entry [python] void saveSimulation(int handle);
		entry [python "write group attribute as tipsy array"]
			void writeGroupArray(int handle);
		entry [python] void getDataType(int handle);
		entry [python] void getCenterOfMass(int handle);
		entry [python "create a new scalar attribute in a family"]
			void createScalarAttribute(int handle);
		entry [python "create a new vector attribute in a family"]
			void createVectorAttribute(int handle);
		entry [python] void createGroup_Family(int handle);
		entry [python] void createGroup_AttributeRange(int handle);
		entry [python] void createGroupAttributeSphere(int handle);
		entry [python] void createGroupAttributeBox(int handle);
		entry [python] void runLocalParticleCode(int handle);
		entry [python "run code over all particles in a group"]
		      	      void runLocalParticleCodeGroup(int handle);
		entry [python "import data from python"] 
			void importData(int handle);
		entry [python "perform a reduction of particle data"]
			void reduceParticle(int handle);
	};
	
	array [1D] Worker {
		entry Worker(const CkGroupID& metaID);
		
		entry void loadSimulation(const std::string& simulationName, const CkCallback& cb);
		entry void saveSimulation(const std::string& path, const CkCallback& cb);
		entry void readTipsyArray(const std::string& fileName,
			    const std::string& attributeName,
			    long off, const CkCallback& cb);
		
		entry void writeGroupArray(const std::string& groupName,
			    const std::string& attributeName,
			    const std::string& fileName,
			    const CkCallback& cb);

		entry void generateImage(liveVizRequestMsg* m);
		
		entry void collectStats(const std::string& id, const CkCallback& cb);
		entry void makeColoring(const std::string& specification, const CkCallback& cb);
		
		entry void calculateDepth(MyVizRequest req, const CkCallback& cb);
		entry void makeGroup(const std::string& s, const CkCallback& cb);
		entry void setActiveGroup(const std::string& s, const CkCallback& cb);
		entry void setDrawVectors(const std::string& s, const CkCallback& cb);
		
		entry void getAttributeInformation(CkCcsRequestMsg* m);
		entry void getColoringInformation(CkCcsRequestMsg* m);
	
		entry void getNumParticlesGroup(const std::string& groupName,
				  const std::string& familyName,
				  const CkCallback& cb);
		entry void findAttributeMin(const std::string& groupName,
			      const std::string& attributeName,
			      const CkCallback& cb);
		entry void getAttributeSum(const std::string& groupName,
					   const std::string& familyName,
					   const std::string& attributeName,
					   const CkCallback& cb);
		entry void getCenterOfMass(std::string const& groupName, CkCallback const& cb);
		entry void getAttributeRangeGroup(const std::string& groupName,
				    const std::string& familyName,
				    const std::string& attributeName,
				    const CkCallback& cb);
	        entry void getVecAttributeRangeGroup(const std::string& groupName,
				    const std::string& familyName,
				    const std::string& attributeName,
				       const CkCallback& cb);
		entry void createScalarAttribute(std::string const& familyName,
					         std::string const& attributeName,
					         CkCallback const& cb);
		entry void createVectorAttribute(std::string const& familyName,
					         std::string const& attributeName,
					         CkCallback const& cb);
		entry void importScalarData( std::string const& familyName, std::string const& attributeName, int length, double c_data[length], CkCallback const&cb);
		entry void importVectorData( std::string const& familyName, std::string const&attributeName, int length, Vector3D<float> c_data[length], CkCallback const&cb);
		entry void createGroup_Family(std::string const& groupName, std::string const& parentGroupName, std::string const& familyName, CkCallback const& cb);
		entry void createGroup_AttributeRange(std::string const& groupName, std::string const& parentGroupName, std::string const& attributeName, double minValue, double maxValue, CkCallback const& cb);
		entry void createGroup_AttributeSphere(const std::string& groupName, const std::string& parentName, const std::string& attributeName, Vector3D<double> center, double size, const CkCallback& cb);
		entry void createGroup_AttributeBox(std::string const& groupName,
				      std::string const& parentGroupName,
				      std::string const& attributeName,
				      Vector3D<double> corner,
				      Vector3D<double> edge1,
				      Vector3D<double> edge2,
				      Vector3D<double> edge3,
				      CkCallback const& cb);
		entry void localParticleCode(std::string s, const CkCallback &cb);
		entry void localParticleCodeGroup(std::string g, std::string s,
		      	   		          PyObjectMarshal obj,
						  const CkCallback &cb);
		entry void reduceParticle(std::string g,
		      	    std::string sParticleCode,
			    std::string sReduceCode, PyObjectMarshal global,
			    const CkCallback &cb);
	};
	
	group MetaInformationHandler {
		entry MetaInformationHandler();
		
		entry void clearBoxes(CkCcsRequestMsg* m);
		entry void clearSpheres(CkCcsRequestMsg* m);
		entry void activate(const std::string& id, const CkCallback& cb);
	};
};
